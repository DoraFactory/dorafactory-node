
//! Autogenerated weights for `pallet_qf`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-29, STEPS: `50`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `fengdembp-2`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/dorafactory-node
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_qf
// --extrinsic
// *
// --steps
// 50
// --repeat
// 200
// --output
// ./pallets/quadratic-funding/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_qf`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_qf::WeightInfo for WeightInfo<T> {
	// Storage: QuadraticFunding Rounds (r:1 w:1)
	fn start_round() -> Weight {
		(13_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: QuadraticFunding Rounds (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	fn donate() -> Weight {
		(39_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: QuadraticFunding Rounds (r:1 w:0)
	// Storage: QuadraticFunding Projects (r:1 w:1)
	fn register_project() -> Weight {
		(18_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: QuadraticFunding Rounds (r:1 w:1)
	// Storage: QuadraticFunding Projects (r:1 w:1)
	// Storage: QuadraticFunding ProjectVotes (r:1 w:1)
	// Storage: QuadraticFunding RoundParticipants (r:1 w:1)
	// Storage: System Account (r:3 w:3)
	fn vote() -> Weight {
		(64_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: QuadraticFunding Rounds (r:1 w:1)
	// Storage: QuadraticFunding Projects (r:2 w:0)
	// Storage: QuadraticFunding RoundParticipants (r:2 w:1)
	// Storage: System Account (r:1 w:1)
	fn end_round() -> Weight {
		(47_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}
