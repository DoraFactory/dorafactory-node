//! Autogenerated weights for pallet_qf
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-31, STEPS: `50`, REPEAT: 200, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/dorafactory-node
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_qf
// --extrinsic
// *
// --steps
// 50
// --repeat
// 200
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// ./pallets/quadratic-funding/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_qf.
pub trait WeightInfo {
    fn start_round() -> Weight;
    fn donate() -> Weight;
    fn register_project() -> Weight;
    fn vote() -> Weight;
    fn end_round() -> Weight;
}

/// Weights for pallet_qf using the Dora node and recommended hardware.
pub struct DoraWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for DoraWeight<T> {
    // Storage: QuadraticFunding Rounds (r:1 w:1)
    fn start_round() -> Weight {
        // (24_096_000 as Weight)
        Weight::from_ref_time(24_096_000 as u64)
            .saturating_add(T::DbWeight::get().reads(1 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: QuadraticFunding Rounds (r:1 w:1)
    // Storage: System Account (r:2 w:2)
    fn donate() -> Weight {
        // (72_841_000 as Weight)
        Weight::from_ref_time(72_841_000 as u64)
            .saturating_add(T::DbWeight::get().reads(3 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
    // Storage: QuadraticFunding Rounds (r:1 w:0)
    // Storage: QuadraticFunding Projects (r:1 w:1)
    fn register_project() -> Weight {
        // (34_641_000 as Weight)
        Weight::from_ref_time(34_641_000 as u64)
            .saturating_add(T::DbWeight::get().reads(2 as u64))
            .saturating_add(T::DbWeight::get().writes(1 as u64))
    }
    // Storage: QuadraticFunding Rounds (r:1 w:1)
    // Storage: QuadraticFunding Projects (r:1 w:1)
    // Storage: QuadraticFunding ProjectVotes (r:1 w:1)
    // Storage: QuadraticFunding RoundParticipants (r:1 w:1)
    // Storage: System Account (r:3 w:3)
    fn vote() -> Weight {
        // (119_924_000 as Weight)
        Weight::from_ref_time(119_924_000 as u64)
            .saturating_add(T::DbWeight::get().reads(7 as u64))
            .saturating_add(T::DbWeight::get().writes(7 as u64))
    }
    // Storage: QuadraticFunding Rounds (r:1 w:1)
    // Storage: QuadraticFunding Projects (r:2 w:0)
    // Storage: QuadraticFunding RoundParticipants (r:2 w:1)
    // Storage: System Account (r:1 w:1)
    fn end_round() -> Weight {
        // (83_375_000 as Weight)
        Weight::from_ref_time(83_375_000 as u64)
            .saturating_add(T::DbWeight::get().reads(6 as u64))
            .saturating_add(T::DbWeight::get().writes(3 as u64))
    }
}

// For backwards compatibility and tests
impl WeightInfo for () {
    fn start_round() -> Weight {
        // (24_096_000 as Weight)
        Weight::from_ref_time(24_096_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(1 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn donate() -> Weight {
        // (72_841_000 as Weight)
        Weight::from_ref_time(72_841_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(3 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
    fn register_project() -> Weight {
        // (34_641_000 as Weight)
        Weight::from_ref_time(34_641_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(2 as u64))
            .saturating_add(RocksDbWeight::get().writes(1 as u64))
    }
    fn vote() -> Weight {
        // (119_924_000 as Weight)
        Weight::from_ref_time(119_924_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(7 as u64))
            .saturating_add(RocksDbWeight::get().writes(7 as u64))
    }
    fn end_round() -> Weight {
        // (83_375_000 as Weight)
        Weight::from_ref_time(83_375_000 as u64)
            .saturating_add(RocksDbWeight::get().reads(6 as u64))
            .saturating_add(RocksDbWeight::get().writes(3 as u64))
    }
}
